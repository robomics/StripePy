# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: MIT

[build-system]
requires = [
    "hatchling",
    "hatch-vcs",
]

build-backend = "hatchling.build"

[project]
name = "stripepy-hic"
description = "StripePy recognizes architectural stripes in 3C and Hi-C contact maps using geometric reasoning"
license = "MIT"
license-files = ["LICENCE"]
dynamic = ["version"]
authors = [
    {name="Andrea Raffo", email="andrea.raffo@ibv.uio.no"},
    {name="Roberto Rossini", email="roberros@uio.no"},
]

maintainers = [
  {name="Andrea Raffo", email="andrea.raffo@ibv.uio.no"},
  {name="Roberto Rossini", email="roberros@uio.no"},
]

readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",

    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

keywords = [
    "hi-c",
    "hic",
    "stripe",
    "stripes",
    "architectural stripe",
    "contact map",
    "cooler",
    "stripe recognition",
]

requires-python = ">=3.9"
dependencies = [
    "h5py >3, <4",
    "hictkpy[scipy] >=1.2, <2",
    "numpy >=2, <3",
    "opentelemetry-api >=1, <2",
    "opentelemetry-sdk >=1, <2",
    "opentelemetry-exporter-otlp-proto-http >=1, <2",
    "packaging",
    "pandas >=2.0, <3",
    "scipy >=1.10, <2",
    "structlog >=24, <26"
]

[project.optional-dependencies]

all = [
    "colorama >=0.4, <0.5",
    "matplotlib >=3.8, <4",
    "rich >=13.9, <15",
]

test = [
    "stripepy-hic[all]",
    "pyarrow",
    "pytest",
    "pytest-cov",
]

docs = [
    "furo==2025.7.19",
    "sphinx==8.2.3",
    "sphinx-copybutton==0.5.2",
]

dev = [
    "stripepy-hic[all,docs,test]",
    "black[jupyter]",
    "build",
    "isort",
    "pre-commit",
]

[project.scripts]
stripepy = "stripepy.main:main"

[project.urls]
Homepage = "https://github.com/paulsengroup/StripePy"
Issues = "https://github.com/paulsengroup/StripePy/issues"
Repository = "https://github.com/paulsengroup/StripePy.git"
Source = "https://github.com/paulsengroup/StripePy"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
markers = ["end2end", "unit"]
python_files = [
  "test/unit/test*.py",
  "test/integration/test*.py",
]
testpaths = [
  "test/integration",
  "test/unit",
]
norecursedirs = [
  "test/unit/test_helpers",
]
filterwarnings = [
  'ignore:This process .* is multi-threaded, use of fork\(\) may lead to deadlocks in the child:DeprecationWarning',
]

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
data_file = "coverage/data/stripepy.cov"
# debug = ["callers", "config", "pytest"]
# debug_file = "coverage/debug.txt"
parallel = true
source_pkgs = ["stripepy"]

[tool.coverage.html]
directory = "coverage/html/"
title = "StripePy coverage report"

[tool.coverage.json]
output = "coverage/stripepy.json"

[tool.coverage.lcov]
output = "coverage/stripepy.lcov"

[tool.coverage.xml]
output = "coverage/stripepy.xml"

[tool.hatch.version]
source = "vcs"
fallback-version = "unknown"

[tool.hatch.build.targets.wheel]
packages = ["src/stripepy"]
